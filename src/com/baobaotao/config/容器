Spring通过配置文件描述Bean与Bean之间的依赖关系，利用Java语言的反射功能实例化Bean并建立Bean之间的依赖关系
Spring的IOC容器在完成这些底层工作的基础上，还提供了Bean实例缓存、生命周期管理、Bean实例代理、事件发布、
资源装载等高级服务。
Bean工厂是Spring框架最核心的接口，它提供了高级Ioc配置机制。BeanFactory使管理不同类型的Java对象成为了可能
应用上下文ApplicationContext建立在BeanFactory基础之上，提供了更多面向应用的功能，国际化支持和框架事件体系
更易于创建实际应用。一般称BeanFactory为IoC容器，而称ApplicationContext为应用上下文。
但有时为了方便我们也将ApplicationContext称为Spring容器。
BeanFactory是Spring框架的基础设施，面向Spring本身；ApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合我们都直接使用
ApplicationContext而非底层的BeanFactory.

ListableBeanFactory:访问Bean基本信息的若干方法。查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括
某一Bean等方法。
HierarchicalBeanFactory:父子级联Ioc容器接口，子容器可以通过接口方法访问父容器。
ConfigurableBeanFactory:是一个重要接口，增强Ioc可定制性，设置类装载器、属性编辑器、容器初始化后置处理器等方法
AutowireCapbleBeanFactory:定义了将容器中得Bean按某种规则进行自动装配的方法
SingletonBeanRegistry:定义了允许在运行期间向容器注册单实例Bean的方法
BeanDefinitionRegistry:Spring配置文件中每个<bean>节点元素在Spring容器里都通过一个BeanDefinition对象表示，
它描述了Bean的配置信息。BeanDefinitionRegistry接口提供了向容器手工注册BeanDefinition对象的方法.
若BeanFactory是Spring的心脏，则ApplicationContext就是完整的身躯。
ApplicationContext主要的实现类是ClassPathXmlApplicationContext和FileSystemXmlApplicationContext
前者默认从类路径加载配置文件，后置默认从文件系统中装载配置文件。
它继承HierarchicalBeanFactory和ListableBeanFactory接口
ApplicationEventPublisher:让容器拥有发布应用上下文事件的功能，包括容器启动事件、关闭事件等。
实现了ApplicationListener事件监听接口的Bean可以接收到容器事件，并对事件进行响应处理。在ApplicationContext抽象
实现类AbstractApplicationContext中，我们可以发现存在一个ApplicationEventMulticaster，它负责保存所有的监听器
以便容器产生上下文事件时通知这些事件监听者。
ApplicationContext的初始化和BeanFactory有一个重大的区别:BeanFactory在初始化容器时，并未实例化Bean，直到第一次访问某个
Bean时才实例目标Bean;而ApplicationContext则在初始化应用上下文时就实例化所有单实例的Bean。

父子容器
通过HierarchicalBeanFactory接口，Spring的IoC容器可用建立父子层级联关联的容器体系，子容器可以访问父容器中的
Bean，但父容器不能访问子容器的Bean。在容器内，Bean的id必须是唯一的，但子容器可以拥有一个和父容器id相同的Bean.
父子容器层级体系增强了Spring容器框架的扩展性和灵活性，因为第三方可以通过编程的方式，为一个已经存在的容器添加
一个或者多个特殊用途的子容器，以提供一些额外的功能。
SpringMVC中展现层Bean位于一个子容器中，而业务层和持久层的Bean位于父容器中。展现层可以引用业务层和持久层的Bean
,反之，则不行。

BeanPostProcessor在Spring框架中占有重要的地位，为容器提供对Bean进行加工处理的
切入点，Spring容器提供的AOP、动态代理都是通过BeanPostProcessor实施；

